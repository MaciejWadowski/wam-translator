options{
    STATIC = false;
}
PARSER_BEGIN(Fact)
    import java.io.PrintStream;

    class Fact {
        private String term = "";
        public static void main(String[] args) throws ParseException, TokenMgrError {
            Fact parser = new Fact(System.in);
            parser.start(System.out);
        }
    }
PARSER_END(Fact)
TOKEN : { < NUMBER : (["1"-"9"](["0"-"9"])+) | ["0"-"9"] > }
TOKEN : { < #ALPHABET : ["a"-"z"] >}
TOKEN : { < DOT : "." > }
TOKEN : { < TERMIDENTIFIER : (["a"-"z"](["0"-"9","a"-"z","A"-"Z"])*) >}
TOKEN : { < OPEN_PAR : "(" > }
TOKEN : { < CLOSE_PAR : ")" > }
//TOKEN : { <EOL : "\n"|"\r" >}
TOKEN : { <COMA : ",">}
<*> SKIP: {
  < " " | "\t" | "\r" | "\n" | "\r\n" >
}
  
void start(PrintStream printStream) :
{
    String clause;
}
{
    (
        clause = Clause()
        { printStream.println(clause); }
    )*
    <EOF>
}

String Clause():
{
    String fact;
}
{
    fact = Fact()
    { return fact; }
}

String Fact() :
{
    String fact= "";
}
{
    fact = CompoundTerm()
    <DOT>
    {return fact + ".";}
}

String CompoundTerm() :
{
    Token identifier;
    String termList;
}
{
    identifier = <TERMIDENTIFIER>
    <OPEN_PAR>
    termList = TermList()
    <CLOSE_PAR>
    { return identifier.image + "(" + termList + ")"; }
}

String TermList() :
{
    String list;
    String nextTerm;
}
{
    list = Term()
    (
        <COMA>
        nextTerm = Term()
        { list += ", " + nextTerm; }
    )*
    { return list; }
}

String Term() :
{
    String value;
}
{
    value = AtomOrCompound()
    { return value; }
    |
    value = Number()
    { return value; } 
}

String AtomOrCompound() :
{
    Token identifier;
    String termList;
}
{
    identifier = <TERMIDENTIFIER>
    (
        <OPEN_PAR>
        termList = TermList()
        <CLOSE_PAR>
        { return identifier.image + "(" + termList + ")"; }
    |
        { return identifier.image; }
    )
}

String Number() :
{
    Token t;
}
{
    t = <NUMBER>
    {return t.image;}
}
